Git is a version cintrol system.

一、
// 本地管理
1.  git init
2.  git add xxx         // 存入暂存区
3.  git commit -m "xxx"
4.  git status  xxx     // watch whether file chagne 
5.  git diff xxx        // watch the detiale change of xxx 
6.  git log             // all commit inforamtion 
7.  git log   --pretty=online    // hide the commit id 
8.  HEAD, HEAD^,HEAD^^,...,HEAD~100 // current version, second version...
    git reset --hard HEAD^          // retreat/withdraw last version
                                    // quash/undo/revocation/revoke
9.  cat readme.txt      // read and display
10. git reset --hard id     // recover version
11. git reflog              // history operate
12. git diff HEAD --readme.txt  //workspace and version liberay diff  工作区和暂存区/版本库里的区别 

14. git reset HEAD file    //撤销暂存区修改，重新放回工作区
   代替  git restore -- stage file 
13. git checkout -- file   //丢弃工作区的修改，回到最近一次git commit/ git add 状态，回退一次 
   代替  git restore file 

15. rm file  // 删除文件（目录）
    git rm file  // 删除目录中的file,并把此次删除提交到暂存区(目录、暂存区)
16. git checkout --file // 工作区（目录）恢复到暂存区中file状态
    先使用git reset head file 在暂存区中将删除操作丢弃，然后git checkout -- file 恢复到工作区


二、
// 远程仓库管理
//...最新的使用main, 以前都是master,
//...gitee 没有进行关联试验，仅仅是连通，main/master 
步骤：
    1. 查看.ssh公钥 
        cd ~/.ssh       //有几个ssh秘钥
        ll              //
        vi/vim 复制 y   //
    2. 创建公钥
        ssh-keygen -t rsa -C "aobo@163.com"  // -f "xxx"  给文件命名
        无需输入密码，三连enter键；--> 之后使用不需要输入密码
    3. 修改/添加github、gitee公钥
        ssh -T git@github /@gitee  查看链接状态
        yes/no/    --> 输入 yes 
        链接成功，但......
    4. 创建github/gitee仓库
        创建时勾选Initial this re.....  -> 自动创建readme.txt 文件
    5. 关联本地仓库
        git remote add origin git@github.com:AoBo-J/learn_git.git
        git branch -M main
        git push -u origin main 
        // 远程仓库的名字叫origin, git默认叫法，可以修改（没试过）
    6. 推送到远程仓库
        git push -u origin main //将当前分支main 推送到远端
        // 第一次推送加上-u参数，git推送并关联起来
        git push origin main 

// 删除远程库关联
    1. git remote -v   // 查看远程库信息
    2. git remote rm xxx (origin) // 删除关联

//克隆远程库 关联仓库
    git clone 


三、
// 分支管理
1. 主分支 master  HEAD指向当前分支
2. 创建dev分支 -- 修改 -- 合并到主分支 -- 删除dev分支 
步骤：
    1. 创建dev分支、切换到dev分支
        git checkout -b dev // 创建  -b 切换
        == git branch dev + git checkout dev

    2. git branch //查看所有分支  当前分支* 
    3. git checkout main // 切换为主分支
    4. git merge dev // dev 分支合并到主分支  
        // fast-forward 快进模式 
    5. git branch -d dev // 删除dev分支

3. git switch -c dev //创建并切换到dev分支
4. git switch master //切换到master分支

// 分支冲突 冲突时需要手动修改
<<<<<  ======  >>>>>  标记不同分支的内容
git log --graph 命令可以看到分支合并图


// 分支管理策略
1. 合并分支 fast forward 模式 删除分支后丢弃分支信息
    强制禁用 会生成一个新的commit,能够看见分支信息
    步骤：
        1. git switch -c dev 
        2. git add readme.txt   git commit -m 
        3. git switch master 
        4. git merger --no-ff -m '........' dev
            // 合并会创建新的commit, 加上-m 参数，把commit 的描述加上
        5. git log 

2. master 分支稳定，只用来发布新版本，
3. 在dev等分支上干活


// bug分支
1. bug修复通过新建分支，修改以后合并分支、删除分支
2. git stash 存藏当前工作
    步骤：
    1. 工作区 dev
    2. git stash
     
    3. git checkout -b issue-101 
        git switch -c issue-101  // 跳转到问题分支，并创建debug分支
    4.  git switch master 
        git merger --no-ff -m "debug" issue-101

    5.  git switch dev / git status
        git stash list   // 查看stash列表
    6.  git stash apply  // 恢复 stash 到工作区
        git stash drop   //  清楚stash 
        //...git stash pop // 恢复并删除
    7. git stash apply stash@{0} // 恢复指定stash
// commit 多的往commit 少的提交

    8. master上的错误修改后，顺便在dev上修改： git cherry-pick 4c805e (issue id )

// 在master上面修改



